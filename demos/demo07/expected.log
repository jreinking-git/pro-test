                      *******************************************************************************
                      * @test           demo-07
                      * @author         Janosch Reinking
                      * @version        1.0.0
                      * @date           01-01-2022 12-00-00
                      *******************************************************************************
INFO             main -------------------------------------------------------------------------------
                      Start runner 'main'
                      -------------------------------------------------------------------------------
INFO             main ===============================================================================
                      Section                                              unsigned integer types (1)
                      -------------------------------------------------------------------------------
INFO             main This test will print all unsigned integer which are available. The formatting
                      is '{ <value as integer>, <value as hex> }'
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:378
                      { 0, 0x00 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:379
                      PASS: the condition evaluates to true:
                      'format.str() == "{ 0, 0x00 }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:386
                      { 1, 0x0001 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:387
                      PASS: the condition evaluates to true:
                      'format.str() == "{ 1, 0x0001 }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:394
                      { 2, 0x00000002 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:395
                      PASS: the condition evaluates to true:
                      'format.str() == "{ 2, 0x00000002 }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:402
                      { 3, 0x0000000000000003 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:403
                      PASS: the condition evaluates to true:
                      'format.str() == "{ 3, 0x0000000000000003 }"'
INFO             main -------------------------------------------------------------------------------
                      End section                                          unsigned integer types (1)
                      ===============================================================================
INFO             main ===============================================================================
                      Section                                                signed integer types (2)
                      -------------------------------------------------------------------------------
INFO             main This test will print all signed integer which are available. The formatting is
                      '{ <value as integer>, <value as hex> }'
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:420
                      { 0, 0x00 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:421
                      PASS: the condition evaluates to true:
                      'format.str() == "{ 0, 0x00 }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:428
                      { -1, 0xffff }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:429
                      PASS: the condition evaluates to true:
                      'format.str() == "{ -1, 0xffff }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:436
                      { -2, 0xfffffffe }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:437
                      PASS: the condition evaluates to true:
                      'format.str() == "{ -2, 0xfffffffe }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:444
                      { -3, 0xfffffffffffffffd }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:445
                      PASS: the condition evaluates to true:
                      'format.str() == "{ -3, 0xfffffffffffffffd }"'
INFO             main -------------------------------------------------------------------------------
                      End section                                            signed integer types (2)
                      ===============================================================================
INFO             main ===============================================================================
                      Section                                                floating point types (3)
                      -------------------------------------------------------------------------------
INFO             main This test will print all floating points types which are available. The
                      formatting is '{ <value as integer>, <value as hex> }'
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:462
                      { 43.3f }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:463
                      PASS: the condition evaluates to true:
                      'format.str() == "{ 43.3f }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:470
                      { -1.32f }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:471
                      PASS: the condition evaluates to true:
                      'format.str() == "{ -1.32f }"'
INFO             main -------------------------------------------------------------------------------
                      End section                                            floating point types (3)
                      ===============================================================================
INFO             main ===============================================================================
                      Section                                          pointer to primitive types (4)
                      -------------------------------------------------------------------------------
INFO             main Pointers should be derefered by using one of the template specialisation of the
                      operator<<(). A pointers value should be printed or { nullptr } if the pointer
                      is a nullptr.
INFO             main -------------------------------------------------------------------------------
                      Print a nullptr
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:494
                      { nullptr }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:495
                      PASS: the condition evaluates to true:
                      'format.str() == "{ nullptr }"'
INFO             main -------------------------------------------------------------------------------
                      Print a pointer to float
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:509
                      @0x556078d85ca0 -> { -1.32f }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:510
                      PASS: the condition evaluates to true:
                      'format.str().find("{ -1.32f }") != std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      Print a pointer to uint8_t
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:524
                      @0x556078d85ca0 -> { 42, 0x2a }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:525
                      PASS: the condition evaluates to true:
                      'format.str().find("{ 42, 0x2a }") != std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      End section                                      pointer to primitive types (4)
                      ===============================================================================
INFO             main ===============================================================================
                      Section                                                          enum types (5)
                      -------------------------------------------------------------------------------
INFO             main This test will print enums which has a generated printer function created by
                      the protest-compiler. A enum value should be printed as string with it's scope
                      (namespace, class, etc), the value as decimal and as hex.
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:550
                      { TestEnum::value1, 0, 0x00000000 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:551
                      PASS: the condition evaluates to true:
                      'format.str() == "{ TestEnum::value1, 0, 0x00000000 }"'
INFO             main -------------------------------------------------------------------------------
                      Print a enum which lives in a namespace.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:564
                      { test::TestEnum::test2, 1, 0x00000001 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:565
                      PASS: the condition evaluates to true:
                      'format.str() == "{ test::TestEnum::test2, 1, 0x00000001 }"'
INFO             main -------------------------------------------------------------------------------
                      Print a enum which lives in a class which lives in a namespace.
                      -------------------------------------------------------------------------------
WARN 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:575
                      Does not work since it tries to forward a inner enum
INFO             main -------------------------------------------------------------------------------
                      Print a enum which lives in a class namespace. The class itself will be include
                      via #include. Therefore the type is know at the start of this file. This case
                      is easier for the protest-compiler to generate a printer function.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:598
                      { AnyClass::InnerEnum::mode1, 0, 0x00000000 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:599
                      PASS: the condition evaluates to true:
                      'format.str() == "{ AnyClass::InnerEnum::mode1, 0, 0x00000000 }"'
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:616
                      { test::AnyClass::InnerEnum::status1, 0, 0x00000000 }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:617
                      PASS: the condition evaluates to true:
                      'format.str() == "{ test::AnyClass::InnerEnum::status1, 0, 0x00000000 }"'
INFO             main -------------------------------------------------------------------------------
                      End section                                                      enum types (5)
                      ===============================================================================
INFO             main ===============================================================================
                      Section                                                        record types (6)
                      -------------------------------------------------------------------------------
INFO             main Records types are classes or structs. The test will demonstrate the printer
                      function generation capabilities of protest.
INFO             main -------------------------------------------------------------------------------
                      Print an empty struct. This is a edge case.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:640
                      struct EmptyStruct {
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:641
                      PASS: the condition evaluates to true:
                      'format.str() == "struct EmptyStruct {\n}"'
INFO             main -------------------------------------------------------------------------------
                      Print struct which has some primitive fields and an enum.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:657
                      struct TestStruct {
                        value1 : { 42, 0x2a }
                        value2 : { 32, 0x0020 }
                        mode   : { TestStructEnum::mode1, 0, 0x00000000 }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:664
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Print struct which has an enum with a custom printer function.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:678
                      struct CustomPrinterStruct {
                        value : { custom value2 }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:682
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Print class which has an nested class. Furtheremore the class has private
                      attributes.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:696
                      class EnclosingStruct {
                        mValue1 : { 42, 0x2a }
                        mValue2 : { 32, 0x0000000000000020 }
                        mValue3 : struct NestedStruct {
                          mValue : { 1, 0x01 }
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:704
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a ptr to a primitive type. Should be derefered by
                      using one of the template specialisation for pointers.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:720
                      struct PtrStruct {
                        value : @0x556078d85ca0 -> { 32, 0x20 }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:722
                      PASS: the condition evaluates to true:
                      'format.str().find(expected) != std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a ptr to a other struct. The protest-compiler should
                      be able to see the usage in the AST. A printer function should be generated.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:740
                      struct PtrStruct2 {
                        ptr : @0x556078d85ca0 -> struct Pointee {
                          value : { 32, 0x20 }
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:742
                      PASS: the condition evaluates to true:
                      'format.str().find(expected) != std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a depth of 3. Protest should only print 2 of them
                      since the max depth is currently 2. The third should be printed as
                      object@<addr>.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:758
                      struct StructDepth3 {
                        value : struct StructDepth2 {
                          value : object@0x556078d85ca8
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:759
                      PASS: the condition evaluates to true:
                      'format.str().find("object@") != std::string::npos'
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:760
                      PASS: the condition evaluates to true:
                      'format.str().find("StructDepth1") == std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a depth of 2.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:774
                      struct StructDepth2 {
                        value : struct StructDepth1 {
                          value : { 32, 0x20 }
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:780
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a pointer to itself. The recursion should stop on
                      depth 2.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:796
                      struct RecursionStruct {
                        value : { 8, 0x08 }
                        self  : @0x556078d85ce0 -> struct RecursionStruct {
                          value : { 8, 0x08 }
                          self  : object@0x556078d85ce8
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:797
                      PASS: the condition evaluates to true:
                      'format.str().find("object@") != std::string::npos'
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:798
                      PASS: the condition evaluates to true:
                      'format.str().find("struct RecursionStruct") != std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a std::set as member. Should be printed as
                      object@<addr> since there is no custom printer function for std::set yet.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:814
                      struct SetStruct {
                        values : object@0x556078d85d00[48] {
                          0x80 0xbe 0x9c 0x54 0xfe 0x7f 0x00 0x00 0x00 0x00 0x00 0x00
                          0xfe 0x7f 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
                          0x08 0x5d 0xd8 0x78 0x60 0x55 0x00 0x00 0x08 0x5d 0xd8 0x78
                          0x60 0x55 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:815
                      PASS: the condition evaluates to true:
                      'format.str().find("object@") != std::string::npos'
INFO             main -------------------------------------------------------------------------------
                      Print a struct which has a std::shared_ptr as member. Whereas there is a custom
                      printer function for std::shared_ptr. since the protest- compiler cannot find
                      the operator<<() with Dummy2 the printer function generation must be triggered
                      explicit by using enforcePrinterGeneration
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:839
                      struct SharedPtrStruct {
                        value : shared_ptr to struct Dummy2 {
                          value : { 0, 0x00 }
                        }
                      }
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:845
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Since there is a template function for std::vector<T> protest should use it.
                      I.e.: it should print a nicely formatted list.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:864
                      vector [
                        struct Dummy3 {
                          value : { 0, 0x00 }
                        },
                        struct Dummy3 {
                          value : { 0, 0x00 }
                        },
                        struct Dummy3 {
                          value : { 0, 0x00 }
                        }
                      ]
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:877
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Since there is a specialization for std::vector<int> of the printer function,
                      protest should prever it. I.e all elements should be printed as unformated
                      integers.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:895
                      vector [1, 2, 3]
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:898
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      Since this vector has more than 5 elements it should print a element per line.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:922
                      vector [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                      ]
PASS 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:936
                      PASS: the condition evaluates to true:
                      'format.str() == expected'
INFO             main -------------------------------------------------------------------------------
                      End section                                                    record types (6)
                      ===============================================================================
INFO             main ===============================================================================
                      Section                                                      array / buffer (7)
                      -------------------------------------------------------------------------------
INFO             main -------------------------------------------------------------------------------
                      Should print a array of uint8_t
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:957
                      struct BufferInStruct1 {
                        buffer : [32] {
                          0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07
                          0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e 0x0f
                          0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17
                          0x18 0x19 0x1a 0x1b 0x1c 0x1d 0x1e 0x1f
                        }
                      }
INFO             main -------------------------------------------------------------------------------
                      Should print a array of uint16_t
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:974
                      struct BufferInStruct2 {
                        buffer : [16] {
                          0x0000 0x0001 0x0002 0x0003 0x0004 0x0005 0x0006 0x0007
                          0x0008 0x0009 0x000a 0x000b 0x000c 0x000d 0x000e 0x000f
                        }
                      }
INFO             main -------------------------------------------------------------------------------
                      Should print a array of uint32_t
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:991
                      struct BufferInStruct3 {
                        buffer : [8] {
                          0x00000000 0x00000001 0x00000002 0x00000003
                          0x00000004 0x00000005 0x00000006 0x00000007
                        }
                      }
INFO             main -------------------------------------------------------------------------------
                      Should print a array of uint64_t
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:1008
                      struct BufferInStruct4 {
                        buffer : [4] {
                          0x0000000000000000 0x0000000000000001 0x0000000000000002 0x0000000000000003
                        }
                      }
INFO             main -------------------------------------------------------------------------------
                      Should limit the number of printed elements.
                      -------------------------------------------------------------------------------
INFO 0000000000  main /home/root/pro-test/demos/demo07/main.pt.cpp:1025
                      struct BufferInStruct5 {
                        buffer : [129] {
                          0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e
                          0x0f 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1a 0x1b 0x1c 0x1d
                          0x1e 0x1f 0x20 0x21 0x22 0x23 0x24 0x25 0x26 0x27 0x28 0x29 0x2a 0x2b 0x2c
                          0x2d 0x2e 0x2f 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x3a 0x3b
                          0x3c 0x3d 0x3e 0x3f 0x40 0x41 0x42 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a
                          0x4b 0x4c 0x4d 0x4e 0x4f 0x50 0x51 0x52 0x53 0x54 0x55 0x56 0x57 0x58 0x59
                          0x5a 0x5b 0x5c 0x5d 0x5e 0x5f 0x60 0x61 0x62 0x63 0x64 0x65 0x66 0x67 0x68
                          0x69 0x6a 0x6b 0x6c 0x6d 0x6e 0x6f 0x70 0x71 0x72 0x73 0x74 0x75 0x76 0x77
                          0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f ...
                        }
                      }
INFO             main -------------------------------------------------------------------------------
                      End section                                                  array / buffer (7)
                      ===============================================================================
INFO             main -------------------------------------------------------------------------------
                      Exit of 'main'
                      -------------------------------------------------------------------------------
                      *******************************************************************************
                      * FAILURES:                0                                               PASS
                      * WARNINGS:                0                                               PASS 
                      * INV VIOLATION:           0                                               PASS 
                      *
                      * TOTAL:                                                                   PASS
                      *******************************************************************************
